name: CI Assignment 6

on:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run tsc and build
        id: build_step
        run: |
          pnpm -F assignment-6 build

      - name: Comment if build fails
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '빌드 실패 ❌'
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run ESLint
        run: |
          pnpm -F assignment-6 lint > eslint_report.txt
        continue-on-error: true

      - name: Check ESLint results
        id: check_eslint
        run: |
          if grep -q 'error' eslint_report.txt; then
            echo "eslint_errors=true" >> $GITHUB_ENV
          else
            echo "eslint_errors=false" >> $GITHUB_ENV
          fi
      - name: Comment on ESLint results
        if: env.eslint_errors == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const eslintReport = fs.readFileSync('eslint_report.txt', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
              ## ESLint Results
              ${eslintReport}
              `
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run tests with coverage
        id: run_tests
        run: |
          pnpm -F assignment-6 test:coverage

      - name: Verify coverage file exists
        run: |
          if [ ! -f ./coverage/coverage-summary.json ]; then
            echo "Coverage summary file not found!"
            exit 1
          fi

      - name: Report Coverage
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          json-summary-path: coverage/coverage-summary.json
          json-final-path: coverage/coverage-final.json
          file-coverage-mode: changes
          working-directory: ./packages/assignment-6

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run Lighthouse
        run: |
          pnpm i -g @lhci/cli
          pnpm -F assignment-6 lhci

      - name: Format lighthouse score
        id: format_lighthouse
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const resultsPath = path.join(process.env.GITHUB_WORKSPACE, 'packages', 'assignment-6', 'lhci_reports', 'manifest.json');

            let comments = "";

            const details = JSON.parse(fs.readFileSync(resultsPath));
            const { categories } = details;

            const formatResult = (res) => Math.round(res * 100);
            const score = (res) => (res >= 90 ? "🟢" : res >= 50 ? "🟠" : "🔴");

            comments = [
              `⚡️ **Lighthouse report** ⚡️`,
              `| Category | Score |`,
              `| --- | --- |`,
              `| ${score(categories.performance.score * 100)} Performance | ${formatResult(categories.performance.score * 100)} |`,
              `| ${score(categories.accessibility.score * 100)} Accessibility | ${formatResult(categories.accessibility.score * 100)} |`,
              `| ${score(categories['best-practices'].score * 100)} Best Practices | ${formatResult(categories['best-practices'].score * 100)} |`,
              `| ${score(categories.seo.score * 100)} SEO | ${formatResult(categories.seo.score * 100)} |`,
              `| ${score(categories.pwa.score * 100)} PWA | ${formatResult(categories.pwa.score * 100)} |`
            ].join("\n");

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comments
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
